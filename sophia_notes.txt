still needs to be edited:
- 1_welcome screen - remove the x because where are you exiting
- 3_newsaved game screen - still needs to add methods for selecting new or saved game
    - we need a saved game search ui screen
- 4_gamemodescreen - needs to go either to the tutorial screen start a new game instead of quitting
- 13_optionsscreen will need to include changing the music changing audio functionality


screens in the new format:
1
2
3
4
9
17
- everything needs to be resized according to width and height, don't add random fixed values 
- all buttons should look like UI screen 7 - should have an outline and centered text

read:
MAKING A PYDOC:
Class Docstring - """text here """
- goes inside a function right after class
-1. description of class
-2. attributes:
    Attributes:
    last_result (int): Stores the last result calculated.
-3. methods
    Methods:
    add(a, b): Returns the sum of two numbers.


Function Docstring - """ text here """
- goes inside a function right after the def 
- 1. should be description of function
- 2. should be parameters: 
    Parameters:
    width (int): The width of the box.
    name (char): The name of the player.
- 3. should be returns
    Returns:
    int: The sum of 2 numbers.
    boolean: If name1 is longer than name2.



GENERAL SCREEN CLASS NOTES:
DO NOT change screen.py
follow the formatting of 17_WinLevelScreen if you are confused
- you do not need to reimport pygame
steps:
0. import from screen (from screen import ScreenBase)
    import pygame
    make a class for the game screen
1. initialize __init__ with super 
2. initialize draw with super and add all design related elements here
3. initialize handle_events with super
4. initialize run with super
5. make instance using this format:
        if __name__ == '__main__':
        game_screenSCREEN_NUM = CLASS_NAME()
        game_screenSCREEN_NUM.run()

- we will add to handle_events when we have events when writing script
- point 5. will go in the main script after testiing
- may or may not use update(self) function to update game state - depends on script


NOTES:
-> current classes need to remove latex !
-> added all UI screens .py classes
    not sure which of the current files are supposed to be UI or the component other than Login, Welcome, and New/Saved game
-> All previous screens need to add resizability and elements should be coded relative to width and length variables
    resizability cannot disable users from trying to resize, but will bounce back to min size set 
    current min size is current frame (844,600)
-> classes that will need image functionality:
    game play
    tutorial 1 and 2
    game play answer reveal
    debugger ? - version more similar to gameplay will require
    correct answer
    incorrect answer
    lose game
    win game
-> creating a general screen.py class that will serve as the parent class for each of the ui screens
    will elimate need to copy paste certain areas of code to the same thing
    need to have the general elements of each screen mapped out so that just the base screen can be changed and that is it-> creating a general screen.py class that will serve as the parent class for each of the ui screens
    will elimate need to copy paste certain areas of code to the same thing
    need to have the general elements of each screen mapped out so that just the base screen can be changed and that is it
-> do we need to install pycaw to get the volume slider?



"""
Instructor Password Screen

"""
from screen import ScreenBase
import pygame
import sys
import os

# Get the absolute path to the src directory
src_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))
sys.path.append(src_dir)
# initializing the constructor 
pygame.init() 

class InstructorPassScreen(ScreenBase):

    def __init__(self):
        super().__init__()

    def draw(self):
        super().draw()

    def handle_events(self):
        # call parent class event handling
        super().handle_events()

    def run(self):
        super().run()

#initialize instance and run
if __name__ == '__main__':
    game_screen1 = InstructorPassScreen()
    game_screen1.run()